# -*- coding: utf-8 -*-
"""actividad bit out

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15lsm_go4jkKHC2a1TXUOInkNx3EuIhnZ

Genesis Escalona 30.908.256

---

BIT OUT

---

**Ordenamiento por burbuja**
"""

def bubble_sort(arr):
    n = len(arr)  # Obtener la longitud de la lista
    # Recorrer todos los elementos de la lista
    for i in range(n):
        swapped = False  # Bandera para detectar si hubo intercambio
        # Últimos i elementos ya están en su lugar
        for j in range(0, n-i-1):
            # Comparar el elemento actual con el siguiente
            if arr[j] > arr[j+1]:
                # Intercambiar si el elemento actual es mayor que el siguiente
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True  # Se realizó un intercambio
        # Si no hubo intercambios, la lista ya está ordenada
        if not swapped:
            break  # Salir del bucle si no se realizaron intercambios

# Ejemplo de uso
lista = [54, 77, 20, 12, 32, 70, 98]
bubble_sort(lista)
print("Lista ordenada:", lista)

"""---

**Ordenamiento por Inserción**
"""

def insertion_sort(arr):
    n = len(arr)  # Obtener la longitud de la lista
    # Recorrer desde el segundo elemento hasta el final de la lista
    for i in range(1, n):
        key = arr[i]  # Elemento a insertar
        j = i - 1
        swapped = False  # Bandera para detectar si hubo intercambio

        # Mover los elementos de arr[0..i-1] que son mayores que la clave
        # a una posición adelante de su posición actual
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]  # Desplazar el elemento hacia la derecha
            j -= 1
            swapped = True  # Se realizó un intercambio

        arr[j + 1] = key  # Insertar la clave en su posición correcta

        # Si no hubo intercambios, la lista ya está ordenada
        if not swapped:
            break  # Salir del bucle si no se realizaron intercambios

# Ejemplo de uso
lista = [64, 34, 25, 12, 22, 11, 90]
insertion_sort(lista)
print("Lista ordenada:", lista)

"""---

**Ordenamiento por selección**
"""

def selection_sort(arr):
    n = len(arr)  # Obtener la longitud de la lista
    # Recorrer todos los elementos de la lista
    for i in range(n):
        min_index = i  # Suponemos que el primer elemento es el mínimo
        swapped = False  # Bandera para detectar si hubo intercambio

        # Encontrar el índice del elemento mínimo en el resto de la lista
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j  # Actualizar el índice del mínimo

        # Intercambiar el elemento mínimo encontrado con el primero
        if min_index != i:
            arr[i], arr[min_index] = arr[min_index], arr[i]
            swapped = True  # Se realizó un intercambio

        # Si no hubo intercambios, la lista ya está ordenada
        if not swapped:
            break  # Salir del bucle si no se realizaron intercambios

# Ejemplo de uso
lista = [54, 77, 20, 12, 32, 70, 98]
selection_sort(lista)
print("Lista ordenada:", lista)